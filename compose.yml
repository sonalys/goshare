services:
  goshareInit:
    depends_on:
      - postgres
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: /usr/local/bin/migration
    image: ghcr.io/sonalys/goshare:latest
    container_name: goshare_migrate
  
  goshare:
    depends_on:
      # - tempo
      - goshareInit
      - postgres
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: /usr/local/bin/server
    image: ghcr.io/sonalys/goshare:latest
    container_name: goshare
    ports:
      - "8080:8080"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafanas
      - ./.config/grafana/provisioning:/etc/grafana/provisioning

  # # Tempo runs as user 10001, and docker compose creates the volume as root.
  # # As such, we need to chown the volume in order for Tempo to start correctly.
  # tempoInit:
  #   image: &tempoImage grafana/tempo:latest
  #   container_name: tempo-init
  #   user: root
  #   entrypoint:
  #     - "chown"
  #     - "10001:10001"
  #     - "/var/tempo"
  #   volumes:
  #     - tempo-data:/var/tempo

  # memcached:
  #   image: memcached:1.6.29
  #   container_name: memcached
  #   ports:
  #     - "11211:11211"
  #   environment:
  #     - MEMCACHED_MAX_MEMORY=64m # Set the maximum memory usage
  #     - MEMCACHED_THREADS=4 # Number of threads to use

  # tempo:
  #   image: *tempoImage
  #   container_name: tempo
  #   command: [ "-config.file=/etc/tempo.yaml" ]
  #   volumes:
  #     - ./.config/tempo/tempo.yaml:/etc/tempo.yaml
  #     - tempo-data:/var/tempo
  #   ports:
  #     - "14268:14268" # jaeger ingest
  #     - "3200:3200" # tempo
  #     - "9095:9095" # tempo grpc
  #     - "4317:4317" # otlp grpc
  #     - "4318:4318" # otlp http
  #     - "9411:9411" # zipkin
  #   depends_on:
  #     - tempoInit
  #     - memcached

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "6831:6831/udp" # UDP port for receiving traces
      - "16686:16686" # Web UI
      - "4317:4317" # otlp grpc
      - "4318:4318" # otlp http
    volumes:
      - jaeger-data:/data

  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: goshare
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

volumes:
  grafana-data: {}
  tempo-data: {}
  postgres-data: {}
  jaeger-data: {}