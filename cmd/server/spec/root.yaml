openapi: "3.0.0"
info:
  version: 1.0.0
  title: Rest API for GoShare

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

paths:
  /healthcheck:
    get:
      operationId: GetHealthcheck
      summary: Healthcheck
      description: Check if the service is healthy
      responses:
        default:
          $ref: "#/components/responses/ErrorResponse"
        '200':
          description: Service is healthy

  /authentication/whoami:
    get:
      operationId: GetIdentity
      description: returns current information on the authenticated entity
      security:
        - cookieAuth: []
      responses:
        default:
          $ref: "#/components/responses/ErrorResponse"
        '200':
          description: Caller is authenticated and the data is successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - user_id
                  - email
                properties:
                  email:
                    type: string
                    format: email
                    description: User's email address
                    example: "john.doe@example.com"
                  user_id:
                    type: string
                    format: uuid

  /authentication/login:
    post:
      operationId: Login
      description: Authenticate as the specified identity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
                password:
                  type: string
                  format: password
                  description: User's password
                  example: "P@ssw0rd"
                  minLength: 8
                  maxLength: 64
      responses:
        default:
          $ref: "#/components/responses/ErrorResponse"
        '200':
          description: Successfully authenticated
          headers:
            Set-Cookie:
              schema:
                type: string
                example: SESSIONID=abcde12345; Path=/; HttpOnly

  /users:
    post:
      operationId: RegisterUser
      description: Registers a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - last_name
                - email
                - password
              properties:
                first_name:
                  type: string
                  description: User's first name
                  example: "John"
                last_name:
                  type: string
                  description: User's last name
                  example: "Doe"
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
                password:
                  type: string
                  format: password
                  description: User's password
                  example: "P@ssw0rd"
                  minLength: 8
      responses:
        default:
          $ref: "#/components/responses/ErrorResponse"
        '200':
          description: User was registered
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
                    format: uuid

  /ledgers:
    get:
      operationId: ListLedgers
      description: Lists all ledgers
      security:
        - cookieAuth: []
      responses:
        default:
          $ref: "#/components/responses/ErrorResponse"
        '200':
          description: List of ledgers
          content:
            application/json:
              schema:
                type: object
                required:
                  - ledgers
                properties:
                  ledgers:
                    type: array
                    items:
                      $ref: "#/components/schemas/Ledger"
    post:
      operationId: CreateLedger
      description: Creates a new ledger. A user can have a maximum of 5 ledgers.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Ledger's name
                  example: "My Ledger"
      responses:
        default:
          $ref: "#/components/responses/ErrorResponse"
        '200':
          description: Ledger was created
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
                    format: uuid

  /ledgers/{ledgerID}/participants:
    get:
      operationId: ListLedgerParticipants
      description: Lists all ledger participants and their balances
      security:
        - cookieAuth: []
      parameters:
        - name: ledgerID
          in: path
          required: true
          description: Ledger ID
          schema:
            type: string
            format: uuid
      responses:
        default:
          $ref: "#/components/responses/ErrorResponse"
        '200':
          description: List of ledger participants
          content:
            application/json:
              schema:
                type: object
                required:
                  - participants
                properties:
                  participants:
                    type: array
                    items:
                      $ref: "#/components/schemas/LedgerParticipant"

    post:
      operationId: AddLedgerParticipant
      description: Adds a new member to the Ledger
      security:
        - cookieAuth: []
      parameters:
        - name: ledgerID
          in: path
          required: true
          description: Ledger ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - emails
              properties:
                emails:
                  type: array
                  description: Invite up to 99 other users. The limit is by Ledger.
                  minItems: 1
                  maxItems: 99
                  items:
                    type: string
                    format: email
      responses:
        default:
          $ref: "#/components/responses/ErrorResponse"
        '202':
          description: All users were added to the ledger

  /ledgers/{ledgerID}/expenses:
    post:
      operationId: CreateExpense
      description: Creates a new expense record
      security:
        - cookieAuth: []
      parameters:
        - name: ledgerID
          in: path
          required: true
          description: Ledger ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Expense"
      responses:
        default:
          $ref: "#/components/responses/ErrorResponse"
        '200':
          description: Expense was created
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
                    format: uuid

  /ledgers/{ledgerID}/expenses/{expenseID}:
    get:
      operationId: GetExpense
      description: Retrieves an expense record
      security:
        - cookieAuth: []
      parameters:
        - name: ledgerID
          in: path
          required: true
          description: Ledger ID
          schema:
            type: string
            format: uuid
        - name: expenseID
          in: path
          required: true
          description: Expense ID
          schema:
            type: string
            format: uuid
      responses:
        default:
          $ref: "#/components/responses/ErrorResponse"
        '200':
          description: Expense was retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: SESSIONID
  responses:
    ErrorResponse:
      description: An error has occurred
      content:
        application/json:
          schema:
            type: object
            required:
              - trace_id
              - errors
            properties:
              trace_id:
                type: string
                format: uuid
                description: Unique identifier for the error instance
                example: "b6b7b3b0-1b4d-4f4b-8b3e-1b4d4f4b8b3e"
              errors:
                type: array
                minItems: 1
                items:
                  $ref: "#/components/schemas/Error"
  schemas:
    Expense:
      type: object
      required:
        - name
        - expense_date
        - records
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the expense
          readOnly: true
        name:
          type: string
          description: Name of the expense
          example: "Dinner"
        expense_date:
          type: string
          format: date-time
          description: Date and time of the expense
          example: "2020-01-01T00:00:00Z"
        records:
          type: array
          items:
            $ref: "#/components/schemas/ExpenseRecord"
    ExpenseRecord:
      type: object
      required:
        - type
        - from_user_id
        - to_user_id
        - amount
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the record
          readOnly: true
        type:
          type: string
          enum:
            - "expense"
            - "settlement"
          description: Type of the record
        from_user_id:
          type: string
          format: uuid
          description: User ID of the person who owes money
        to_user_id:
          type: string
          format: uuid
          description: User ID of the person who is owed money
        amount:
          type: integer
          format: int32
          description: Amount of money involved in the transaction
    LedgerParticipant:
      type: object
      required:
        - id
        - user_id
        - created_at
        - created_by
        - balance
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
          description: Date and time the participant was created
          example: "2020-01-01T00:00:00Z"
        created_by:
          type: string
          format: uuid
          description: User ID of the creator
          example: "123e4567-e89b-12d3-a456-426614174000"
        balance:
          type: integer
          format: int32
          description: User's balance in the ledger
    Ledger:
      type: object
      required:
        - id
        - name
        - created_at
        - created_by
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Ledger's name
          example: "My Ledger"
        created_at:
          type: string
          format: date-time
          description: Date and time the ledger was created
          example: "2020-01-01T00:00:00Z"
        created_by:
          type: string
          format: uuid
          description: User ID of the creator
          example: "123e4567-e89b-12d3-a456-426614174000"
    ErrorMetadata:
      type: object
      properties:
        field:
          type: string
          example: "name"
    Error:
      type: object
      required:
        - message
        - code
      properties:
        code:
          type: string
          enum:
            - "not_found"
            - "required_header"
            - "required_parameter"
            - "invalid_parameter"
            - "internal_error"
            - "required_body"
            - "invalid_field"
            - "required_field"
            - "email_password_mismatch"
            - "forbidden"
            - "unauthorized"
            - "ledger_max_users"
            - "user_max_ledgers"
            - "authentication_expired"
            - "user_already_member"
            - "user_not_member"
        message:
          type: string
          description: Human readable error message
          example: "Missing parameter 'name'"
        metadata:
          $ref: "#/components/schemas/ErrorMetadata"