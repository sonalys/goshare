// Code generated by ogen, DO NOT EDIT.

package handlers

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddLedgerParticipant implements AddLedgerParticipant operation.
	//
	// Adds a new member to the Ledger.
	//
	// POST /ledgers/{ledgerID}/participants
	AddLedgerParticipant(ctx context.Context, req *AddLedgerParticipantReq, params AddLedgerParticipantParams) error
	// CreateExpense implements CreateExpense operation.
	//
	// Creates a new expense record.
	//
	// POST /ledgers/{ledgerID}/expenses
	CreateExpense(ctx context.Context, req *Expense, params CreateExpenseParams) (*CreateExpenseOK, error)
	// CreateLedger implements CreateLedger operation.
	//
	// Creates a new ledger. A user can have a maximum of 5 ledgers.
	//
	// POST /ledgers
	CreateLedger(ctx context.Context, req *CreateLedgerReq) (*CreateLedgerOK, error)
	// GetHealthcheck implements GetHealthcheck operation.
	//
	// Check if the service is healthy.
	//
	// GET /healthcheck
	GetHealthcheck(ctx context.Context) error
	// GetIdentity implements GetIdentity operation.
	//
	// Returns current information on the authenticated entity.
	//
	// GET /authentication/whoami
	GetIdentity(ctx context.Context) (*GetIdentityOK, error)
	// ListLedgerParticipants implements ListLedgerParticipants operation.
	//
	// Lists all ledger participants and their balances.
	//
	// GET /ledgers/{ledgerID}/participants
	ListLedgerParticipants(ctx context.Context, params ListLedgerParticipantsParams) (*ListLedgerParticipantsOK, error)
	// ListLedgers implements ListLedgers operation.
	//
	// Lists all ledgers.
	//
	// GET /ledgers
	ListLedgers(ctx context.Context) (*ListLedgersOK, error)
	// Login implements Login operation.
	//
	// Authenticate as the specified identity.
	//
	// POST /authentication/login
	Login(ctx context.Context, req *LoginReq) (*LoginOK, error)
	// RegisterUser implements RegisterUser operation.
	//
	// Registers a new user.
	//
	// POST /users
	RegisterUser(ctx context.Context, req *RegisterUserReq) (*RegisterUserOK, error)
	// NewError creates *ErrorResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorResponseStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
