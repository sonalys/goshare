// Code generated by ogen, DO NOT EDIT.

package handlers

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AuthenticationLogin implements AuthenticationLogin operation.
	//
	// Authenticate as the specified identity.
	//
	// POST /authentication/login
	AuthenticationLogin(ctx context.Context, req *AuthenticationLoginReq) (*AuthenticationLoginOK, error)
	// AuthenticationWhoAmI implements AuthenticationWhoAmI operation.
	//
	// Returns current information on the authenticated entity.
	//
	// GET /authentication/whoami
	AuthenticationWhoAmI(ctx context.Context) (*AuthenticationWhoAmIOK, error)
	// Healthcheck implements Healthcheck operation.
	//
	// Check if the service is healthy.
	//
	// GET /healthcheck
	Healthcheck(ctx context.Context) error
	// LedgerCreate implements LedgerCreate operation.
	//
	// Creates a new ledger. A user can have a maximum of 5 ledgers.
	//
	// POST /ledgers
	LedgerCreate(ctx context.Context, req *LedgerCreateReq) (*LedgerCreateOK, error)
	// LedgerExpenseCreate implements LedgerExpenseCreate operation.
	//
	// Creates a new expense record.
	//
	// POST /ledgers/{ledgerID}/expenses
	LedgerExpenseCreate(ctx context.Context, req *Expense, params LedgerExpenseCreateParams) (*LedgerExpenseCreateOK, error)
	// LedgerExpenseGet implements LedgerExpenseGet operation.
	//
	// Retrieves an expense record.
	//
	// GET /ledgers/{ledgerID}/expenses/{expenseID}
	LedgerExpenseGet(ctx context.Context, params LedgerExpenseGetParams) (*Expense, error)
	// LedgerExpenseList implements LedgerExpenseList operation.
	//
	// Lists all expenses in the ledger.
	//
	// GET /ledgers/{ledgerID}/expenses
	LedgerExpenseList(ctx context.Context, params LedgerExpenseListParams) (*LedgerExpenseListOK, error)
	// LedgerList implements LedgerList operation.
	//
	// Lists all ledgers.
	//
	// GET /ledgers
	LedgerList(ctx context.Context) (*LedgerListOK, error)
	// LedgerParticipantAdd implements LedgerParticipantAdd operation.
	//
	// Adds a new member to the Ledger.
	//
	// POST /ledgers/{ledgerID}/participants
	LedgerParticipantAdd(ctx context.Context, req *LedgerParticipantAddReq, params LedgerParticipantAddParams) error
	// LedgerParticipantList implements LedgerParticipantList operation.
	//
	// Lists all ledger participants and their balances.
	//
	// GET /ledgers/{ledgerID}/participants
	LedgerParticipantList(ctx context.Context, params LedgerParticipantListParams) (*LedgerParticipantListOK, error)
	// UserRegister implements UserRegister operation.
	//
	// Registers a new user.
	//
	// POST /users
	UserRegister(ctx context.Context, req *UserRegisterReq) (*UserRegisterOK, error)
	// NewError creates *ErrorResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorResponseStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
