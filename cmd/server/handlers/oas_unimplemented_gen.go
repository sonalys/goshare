// Code generated by ogen, DO NOT EDIT.

package handlers

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// AuthenticationLogin implements AuthenticationLogin operation.
//
// Authenticate as the specified identity.
//
// POST /authentication/login
func (UnimplementedHandler) AuthenticationLogin(ctx context.Context, req *AuthenticationLoginReq) (r *AuthenticationLoginOK, _ error) {
	return r, ht.ErrNotImplemented
}

// AuthenticationWhoAmI implements AuthenticationWhoAmI operation.
//
// Returns current information on the authenticated entity.
//
// GET /authentication/whoami
func (UnimplementedHandler) AuthenticationWhoAmI(ctx context.Context) (r *AuthenticationWhoAmIOK, _ error) {
	return r, ht.ErrNotImplemented
}

// Healthcheck implements Healthcheck operation.
//
// Check if the service is healthy.
//
// GET /healthcheck
func (UnimplementedHandler) Healthcheck(ctx context.Context) error {
	return ht.ErrNotImplemented
}

// LedgerCreate implements LedgerCreate operation.
//
// Creates a new ledger. A user can have a maximum of 5 ledgers.
//
// POST /ledgers
func (UnimplementedHandler) LedgerCreate(ctx context.Context, req *LedgerCreateReq) (r *LedgerCreateOK, _ error) {
	return r, ht.ErrNotImplemented
}

// LedgerExpenseCreate implements LedgerExpenseCreate operation.
//
// Creates a new expense record.
//
// POST /ledgers/{ledgerID}/expenses
func (UnimplementedHandler) LedgerExpenseCreate(ctx context.Context, req *Expense, params LedgerExpenseCreateParams) (r *LedgerExpenseCreateOK, _ error) {
	return r, ht.ErrNotImplemented
}

// LedgerExpenseGet implements LedgerExpenseGet operation.
//
// Retrieves an expense.
//
// GET /ledgers/{ledgerID}/expenses/{expenseID}
func (UnimplementedHandler) LedgerExpenseGet(ctx context.Context, params LedgerExpenseGetParams) (r *Expense, _ error) {
	return r, ht.ErrNotImplemented
}

// LedgerExpenseList implements LedgerExpenseList operation.
//
// Lists all expenses in the ledger.
//
// GET /ledgers/{ledgerID}/expenses
func (UnimplementedHandler) LedgerExpenseList(ctx context.Context, params LedgerExpenseListParams) (r *LedgerExpenseListOK, _ error) {
	return r, ht.ErrNotImplemented
}

// LedgerExpenseRecordCreate implements LedgerExpenseRecordCreate operation.
//
// Creates a new expense record.
//
// POST /ledgers/{ledgerID}/expenses/{expenseID}/records
func (UnimplementedHandler) LedgerExpenseRecordCreate(ctx context.Context, req *LedgerExpenseRecordCreateReq, params LedgerExpenseRecordCreateParams) (r *Expense, _ error) {
	return r, ht.ErrNotImplemented
}

// LedgerExpenseRecordDelete implements LedgerExpenseRecordDelete operation.
//
// Delete an expense record.
//
// DELETE /ledgers/{ledgerID}/expenses/{expenseID}/records/{recordID}
func (UnimplementedHandler) LedgerExpenseRecordDelete(ctx context.Context, params LedgerExpenseRecordDeleteParams) error {
	return ht.ErrNotImplemented
}

// LedgerList implements LedgerList operation.
//
// Lists all ledgers.
//
// GET /ledgers
func (UnimplementedHandler) LedgerList(ctx context.Context) (r *LedgerListOK, _ error) {
	return r, ht.ErrNotImplemented
}

// LedgerMemberAdd implements LedgerMemberAdd operation.
//
// Adds a new member to the Ledger.
//
// POST /ledgers/{ledgerID}/members
func (UnimplementedHandler) LedgerMemberAdd(ctx context.Context, req *LedgerMemberAddReq, params LedgerMemberAddParams) error {
	return ht.ErrNotImplemented
}

// LedgerMemberList implements LedgerMemberList operation.
//
// Lists all ledger members and their balances.
//
// GET /ledgers/{ledgerID}/members
func (UnimplementedHandler) LedgerMemberList(ctx context.Context, params LedgerMemberListParams) (r *LedgerMemberListOK, _ error) {
	return r, ht.ErrNotImplemented
}

// UserRegister implements UserRegister operation.
//
// Registers a new user.
//
// POST /users
func (UnimplementedHandler) UserRegister(ctx context.Context, req *UserRegisterReq) (r *UserRegisterOK, _ error) {
	return r, ht.ErrNotImplemented
}

// NewError creates *ErrorResponseStatusCode from error returned by handler.
//
// Used for common default response.
func (UnimplementedHandler) NewError(ctx context.Context, err error) (r *ErrorResponseStatusCode) {
	r = new(ErrorResponseStatusCode)
	return r
}
