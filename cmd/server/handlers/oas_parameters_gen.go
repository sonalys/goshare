// Code generated by ogen, DO NOT EDIT.

package handlers

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AddLedgerMemberParams is parameters of AddLedgerMember operation.
type AddLedgerMemberParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
}

func unpackAddLedgerMemberParams(packed middleware.Parameters) (params AddLedgerMemberParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAddLedgerMemberParams(args [1]string, argsEscaped bool, r *http.Request) (params AddLedgerMemberParams, _ error) {
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateExpenseParams is parameters of CreateExpense operation.
type CreateExpenseParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
}

func unpackCreateExpenseParams(packed middleware.Parameters) (params CreateExpenseParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeCreateExpenseParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateExpenseParams, _ error) {
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListLedgerBalancesParams is parameters of ListLedgerBalances operation.
type ListLedgerBalancesParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
}

func unpackListLedgerBalancesParams(packed middleware.Parameters) (params ListLedgerBalancesParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeListLedgerBalancesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListLedgerBalancesParams, _ error) {
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListLedgerExpensesParams is parameters of ListLedgerExpenses operation.
type ListLedgerExpensesParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
	// The number of documents returned.
	Limit OptInt32
	// The identifier of the last document returned on the previous pagination.
	Cursor OptDateTime
}

func unpackListLedgerExpensesParams(packed middleware.Parameters) (params ListLedgerExpensesParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "cursor",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Cursor = v.(OptDateTime)
		}
	}
	return params
}

func decodeListLedgerExpensesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListLedgerExpensesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: cursor.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cursor",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCursorVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotCursorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Cursor.SetTo(paramsDotCursorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cursor",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
