// Code generated by ogen, DO NOT EDIT.

package handlers

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AddLedgerParticipantParams is parameters of AddLedgerParticipant operation.
type AddLedgerParticipantParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
}

func unpackAddLedgerParticipantParams(packed middleware.Parameters) (params AddLedgerParticipantParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAddLedgerParticipantParams(args [1]string, argsEscaped bool, r *http.Request) (params AddLedgerParticipantParams, _ error) {
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateExpenseParams is parameters of CreateExpense operation.
type CreateExpenseParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
}

func unpackCreateExpenseParams(packed middleware.Parameters) (params CreateExpenseParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeCreateExpenseParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateExpenseParams, _ error) {
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetExpenseParams is parameters of GetExpense operation.
type GetExpenseParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
	// Expense ID.
	ExpenseID uuid.UUID
}

func unpackGetExpenseParams(packed middleware.Parameters) (params GetExpenseParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "expenseID",
			In:   "path",
		}
		params.ExpenseID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetExpenseParams(args [2]string, argsEscaped bool, r *http.Request) (params GetExpenseParams, _ error) {
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: expenseID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "expenseID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ExpenseID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "expenseID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListLedgerParticipantsParams is parameters of ListLedgerParticipants operation.
type ListLedgerParticipantsParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
}

func unpackListLedgerParticipantsParams(packed middleware.Parameters) (params ListLedgerParticipantsParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeListLedgerParticipantsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListLedgerParticipantsParams, _ error) {
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
