// Code generated by ogen, DO NOT EDIT.

package handlers

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// LedgerExpenseCreateParams is parameters of LedgerExpenseCreate operation.
type LedgerExpenseCreateParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
}

func unpackLedgerExpenseCreateParams(packed middleware.Parameters) (params LedgerExpenseCreateParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeLedgerExpenseCreateParams(args [1]string, argsEscaped bool, r *http.Request) (params LedgerExpenseCreateParams, _ error) {
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LedgerExpenseGetParams is parameters of LedgerExpenseGet operation.
type LedgerExpenseGetParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
	// Expense ID.
	ExpenseID uuid.UUID
}

func unpackLedgerExpenseGetParams(packed middleware.Parameters) (params LedgerExpenseGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "expenseID",
			In:   "path",
		}
		params.ExpenseID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeLedgerExpenseGetParams(args [2]string, argsEscaped bool, r *http.Request) (params LedgerExpenseGetParams, _ error) {
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: expenseID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "expenseID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ExpenseID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "expenseID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LedgerExpenseListParams is parameters of LedgerExpenseList operation.
type LedgerExpenseListParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
	// Cursor for pagination.
	Cursor OptDateTime
	// Number of items to return.
	Limit OptInt32
}

func unpackLedgerExpenseListParams(packed middleware.Parameters) (params LedgerExpenseListParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "cursor",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Cursor = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	return params
}

func decodeLedgerExpenseListParams(args [1]string, argsEscaped bool, r *http.Request) (params LedgerExpenseListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: cursor.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cursor",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCursorVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotCursorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Cursor.SetTo(paramsDotCursorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cursor",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int32(10)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// LedgerExpenseRecordCreateParams is parameters of LedgerExpenseRecordCreate operation.
type LedgerExpenseRecordCreateParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
	// Expense ID.
	ExpenseID uuid.UUID
}

func unpackLedgerExpenseRecordCreateParams(packed middleware.Parameters) (params LedgerExpenseRecordCreateParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "expenseID",
			In:   "path",
		}
		params.ExpenseID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeLedgerExpenseRecordCreateParams(args [2]string, argsEscaped bool, r *http.Request) (params LedgerExpenseRecordCreateParams, _ error) {
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: expenseID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "expenseID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ExpenseID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "expenseID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LedgerExpenseRecordDeleteParams is parameters of LedgerExpenseRecordDelete operation.
type LedgerExpenseRecordDeleteParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
	// Expense ID.
	ExpenseID uuid.UUID
	// Expense Record ID.
	RecordID uuid.UUID
}

func unpackLedgerExpenseRecordDeleteParams(packed middleware.Parameters) (params LedgerExpenseRecordDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "expenseID",
			In:   "path",
		}
		params.ExpenseID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "recordID",
			In:   "path",
		}
		params.RecordID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeLedgerExpenseRecordDeleteParams(args [3]string, argsEscaped bool, r *http.Request) (params LedgerExpenseRecordDeleteParams, _ error) {
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: expenseID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "expenseID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ExpenseID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "expenseID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: recordID.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "recordID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.RecordID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "recordID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LedgerMemberAddParams is parameters of LedgerMemberAdd operation.
type LedgerMemberAddParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
}

func unpackLedgerMemberAddParams(packed middleware.Parameters) (params LedgerMemberAddParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeLedgerMemberAddParams(args [1]string, argsEscaped bool, r *http.Request) (params LedgerMemberAddParams, _ error) {
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LedgerMemberListParams is parameters of LedgerMemberList operation.
type LedgerMemberListParams struct {
	// Ledger ID.
	LedgerID uuid.UUID
}

func unpackLedgerMemberListParams(packed middleware.Parameters) (params LedgerMemberListParams) {
	{
		key := middleware.ParameterKey{
			Name: "ledgerID",
			In:   "path",
		}
		params.LedgerID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeLedgerMemberListParams(args [1]string, argsEscaped bool, r *http.Request) (params LedgerMemberListParams, _ error) {
	// Decode path: ledgerID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ledgerID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.LedgerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ledgerID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
