// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package postgres

import (
	"context"
	"sync"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/sonalys/goshare/internal/infrastructure/postgres"
	"github.com/sonalys/goshare/internal/infrastructure/postgres/sqlc"
)

// Ensure that mockconnection does implement postgres.connection.
// If this is not the case, regenerate this file with mockery.
var _ postgres.connection = &mockconnection{}

// mockconnection is a mock implementation of postgres.connection.
//
//	func TestSomethingThatUsesconnection(t *testing.T) {
//
//		// make and configure a mocked postgres.connection
//		mockedconnection := &mockconnection{
//			queriesFunc: func() *sqlc.Queries {
//				panic("mock out the queries method")
//			},
//			transactionFunc: func(ctx context.Context, f func(q *sqlc.Queries) error) error {
//				panic("mock out the transaction method")
//			},
//		}
//
//		// use mockedconnection in code that requires postgres.connection
//		// and then make assertions.
//
//	}
type mockconnection struct {
	// queriesFunc mocks the queries method.
	queriesFunc func() *sqlc.Queries

	// transactionFunc mocks the transaction method.
	transactionFunc func(ctx context.Context, f func(q *sqlc.Queries) error) error

	// calls tracks calls to the methods.
	calls struct {
		// queries holds details about calls to the queries method.
		queries []struct {
		}
		// transaction holds details about calls to the transaction method.
		transaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F func(q *sqlc.Queries) error
		}
	}
	lockqueries     sync.RWMutex
	locktransaction sync.RWMutex
}

// queries calls queriesFunc.
func (mock *mockconnection) queries() *sqlc.Queries {
	if mock.queriesFunc == nil {
		panic("mockconnection.queriesFunc: method is nil but connection.queries was just called")
	}
	callInfo := struct {
	}{}
	mock.lockqueries.Lock()
	mock.calls.queries = append(mock.calls.queries, callInfo)
	mock.lockqueries.Unlock()
	return mock.queriesFunc()
}

// queriesCalls gets all the calls that were made to queries.
// Check the length with:
//
//	len(mockedconnection.queriesCalls())
func (mock *mockconnection) queriesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockqueries.RLock()
	calls = mock.calls.queries
	mock.lockqueries.RUnlock()
	return calls
}

// transaction calls transactionFunc.
func (mock *mockconnection) transaction(ctx context.Context, f func(q *sqlc.Queries) error) error {
	if mock.transactionFunc == nil {
		panic("mockconnection.transactionFunc: method is nil but connection.transaction was just called")
	}
	callInfo := struct {
		Ctx context.Context
		F   func(q *sqlc.Queries) error
	}{
		Ctx: ctx,
		F:   f,
	}
	mock.locktransaction.Lock()
	mock.calls.transaction = append(mock.calls.transaction, callInfo)
	mock.locktransaction.Unlock()
	return mock.transactionFunc(ctx, f)
}

// transactionCalls gets all the calls that were made to transaction.
// Check the length with:
//
//	len(mockedconnection.transactionCalls())
func (mock *mockconnection) transactionCalls() []struct {
	Ctx context.Context
	F   func(q *sqlc.Queries) error
} {
	var calls []struct {
		Ctx context.Context
		F   func(q *sqlc.Queries) error
	}
	mock.locktransaction.RLock()
	calls = mock.calls.transaction
	mock.locktransaction.RUnlock()
	return calls
}

// Ensure that mockpgxConn does implement postgres.pgxConn.
// If this is not the case, regenerate this file with mockery.
var _ postgres.pgxConn = &mockpgxConn{}

// mockpgxConn is a mock implementation of postgres.pgxConn.
//
//	func TestSomethingThatUsespgxConn(t *testing.T) {
//
//		// make and configure a mocked postgres.pgxConn
//		mockedpgxConn := &mockpgxConn{
//			BeginFunc: func(ctx context.Context) (pgx.Tx, error) {
//				panic("mock out the Begin method")
//			},
//			ExecFunc: func(context1 context.Context, s string, ifaceVals ...interface{}) (pgconn.CommandTag, error) {
//				panic("mock out the Exec method")
//			},
//			QueryFunc: func(context1 context.Context, s string, ifaceVals ...interface{}) (pgx.Rows, error) {
//				panic("mock out the Query method")
//			},
//			QueryRowFunc: func(context1 context.Context, s string, ifaceVals ...interface{}) pgx.Row {
//				panic("mock out the QueryRow method")
//			},
//		}
//
//		// use mockedpgxConn in code that requires postgres.pgxConn
//		// and then make assertions.
//
//	}
type mockpgxConn struct {
	// BeginFunc mocks the Begin method.
	BeginFunc func(ctx context.Context) (pgx.Tx, error)

	// ExecFunc mocks the Exec method.
	ExecFunc func(context1 context.Context, s string, ifaceVals ...interface{}) (pgconn.CommandTag, error)

	// QueryFunc mocks the Query method.
	QueryFunc func(context1 context.Context, s string, ifaceVals ...interface{}) (pgx.Rows, error)

	// QueryRowFunc mocks the QueryRow method.
	QueryRowFunc func(context1 context.Context, s string, ifaceVals ...interface{}) pgx.Row

	// calls tracks calls to the methods.
	calls struct {
		// Begin holds details about calls to the Begin method.
		Begin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// S is the s argument value.
			S string
			// IfaceVals is the ifaceVals argument value.
			IfaceVals []interface{}
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// S is the s argument value.
			S string
			// IfaceVals is the ifaceVals argument value.
			IfaceVals []interface{}
		}
		// QueryRow holds details about calls to the QueryRow method.
		QueryRow []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// S is the s argument value.
			S string
			// IfaceVals is the ifaceVals argument value.
			IfaceVals []interface{}
		}
	}
	lockBegin    sync.RWMutex
	lockExec     sync.RWMutex
	lockQuery    sync.RWMutex
	lockQueryRow sync.RWMutex
}

// Begin calls BeginFunc.
func (mock *mockpgxConn) Begin(ctx context.Context) (pgx.Tx, error) {
	if mock.BeginFunc == nil {
		panic("mockpgxConn.BeginFunc: method is nil but pgxConn.Begin was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockBegin.Lock()
	mock.calls.Begin = append(mock.calls.Begin, callInfo)
	mock.lockBegin.Unlock()
	return mock.BeginFunc(ctx)
}

// BeginCalls gets all the calls that were made to Begin.
// Check the length with:
//
//	len(mockedpgxConn.BeginCalls())
func (mock *mockpgxConn) BeginCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockBegin.RLock()
	calls = mock.calls.Begin
	mock.lockBegin.RUnlock()
	return calls
}

// Exec calls ExecFunc.
func (mock *mockpgxConn) Exec(context1 context.Context, s string, ifaceVals ...interface{}) (pgconn.CommandTag, error) {
	if mock.ExecFunc == nil {
		panic("mockpgxConn.ExecFunc: method is nil but pgxConn.Exec was just called")
	}
	callInfo := struct {
		Context1  context.Context
		S         string
		IfaceVals []interface{}
	}{
		Context1:  context1,
		S:         s,
		IfaceVals: ifaceVals,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	return mock.ExecFunc(context1, s, ifaceVals...)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//
//	len(mockedpgxConn.ExecCalls())
func (mock *mockpgxConn) ExecCalls() []struct {
	Context1  context.Context
	S         string
	IfaceVals []interface{}
} {
	var calls []struct {
		Context1  context.Context
		S         string
		IfaceVals []interface{}
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *mockpgxConn) Query(context1 context.Context, s string, ifaceVals ...interface{}) (pgx.Rows, error) {
	if mock.QueryFunc == nil {
		panic("mockpgxConn.QueryFunc: method is nil but pgxConn.Query was just called")
	}
	callInfo := struct {
		Context1  context.Context
		S         string
		IfaceVals []interface{}
	}{
		Context1:  context1,
		S:         s,
		IfaceVals: ifaceVals,
	}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc(context1, s, ifaceVals...)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//
//	len(mockedpgxConn.QueryCalls())
func (mock *mockpgxConn) QueryCalls() []struct {
	Context1  context.Context
	S         string
	IfaceVals []interface{}
} {
	var calls []struct {
		Context1  context.Context
		S         string
		IfaceVals []interface{}
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}

// QueryRow calls QueryRowFunc.
func (mock *mockpgxConn) QueryRow(context1 context.Context, s string, ifaceVals ...interface{}) pgx.Row {
	if mock.QueryRowFunc == nil {
		panic("mockpgxConn.QueryRowFunc: method is nil but pgxConn.QueryRow was just called")
	}
	callInfo := struct {
		Context1  context.Context
		S         string
		IfaceVals []interface{}
	}{
		Context1:  context1,
		S:         s,
		IfaceVals: ifaceVals,
	}
	mock.lockQueryRow.Lock()
	mock.calls.QueryRow = append(mock.calls.QueryRow, callInfo)
	mock.lockQueryRow.Unlock()
	return mock.QueryRowFunc(context1, s, ifaceVals...)
}

// QueryRowCalls gets all the calls that were made to QueryRow.
// Check the length with:
//
//	len(mockedpgxConn.QueryRowCalls())
func (mock *mockpgxConn) QueryRowCalls() []struct {
	Context1  context.Context
	S         string
	IfaceVals []interface{}
} {
	var calls []struct {
		Context1  context.Context
		S         string
		IfaceVals []interface{}
	}
	mock.lockQueryRow.RLock()
	calls = mock.calls.QueryRow
	mock.lockQueryRow.RUnlock()
	return calls
}
