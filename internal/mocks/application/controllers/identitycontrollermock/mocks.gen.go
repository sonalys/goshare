// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package identitycontrollermock

import (
	"sync"

	"github.com/sonalys/goshare/internal/application/controllers/identitycontroller"
	"github.com/sonalys/goshare/pkg/v1"
)

// Ensure that IdentityEncoder does implement identitycontroller.IdentityEncoder.
// If this is not the case, regenerate this file with mockery.
var _ identitycontroller.IdentityEncoder = &IdentityEncoder{}

// IdentityEncoder is a mock implementation of identitycontroller.IdentityEncoder.
//
//	func TestSomethingThatUsesIdentityEncoder(t *testing.T) {
//
//		// make and configure a mocked identitycontroller.IdentityEncoder
//		mockedIdentityEncoder := &IdentityEncoder{
//			EncodeFunc: func(identity *v1.Identity) (string, error) {
//				panic("mock out the Encode method")
//			},
//		}
//
//		// use mockedIdentityEncoder in code that requires identitycontroller.IdentityEncoder
//		// and then make assertions.
//
//	}
type IdentityEncoder struct {
	// EncodeFunc mocks the Encode method.
	EncodeFunc func(identity *v1.Identity) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Encode holds details about calls to the Encode method.
		Encode []struct {
			// Identity is the identity argument value.
			Identity *v1.Identity
		}
	}
	lockEncode sync.RWMutex
}

// Encode calls EncodeFunc.
func (mock *IdentityEncoder) Encode(identity *v1.Identity) (string, error) {
	if mock.EncodeFunc == nil {
		panic("IdentityEncoder.EncodeFunc: method is nil but IdentityEncoder.Encode was just called")
	}
	callInfo := struct {
		Identity *v1.Identity
	}{
		Identity: identity,
	}
	mock.lockEncode.Lock()
	mock.calls.Encode = append(mock.calls.Encode, callInfo)
	mock.lockEncode.Unlock()
	return mock.EncodeFunc(identity)
}

// EncodeCalls gets all the calls that were made to Encode.
// Check the length with:
//
//	len(mockedIdentityEncoder.EncodeCalls())
func (mock *IdentityEncoder) EncodeCalls() []struct {
	Identity *v1.Identity
} {
	var calls []struct {
		Identity *v1.Identity
	}
	mock.lockEncode.RLock()
	calls = mock.calls.Encode
	mock.lockEncode.RUnlock()
	return calls
}
