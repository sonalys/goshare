// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package sqlcgenmock

import (
	"context"
	"sync"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/sonalys/goshare/internal/infrastructure/postgres/sqlcgen"
)

// Ensure that DBTX does implement sqlcgen.DBTX.
// If this is not the case, regenerate this file with mockery.
var _ sqlcgen.DBTX = &DBTX{}

// DBTX is a mock implementation of sqlcgen.DBTX.
//
//	func TestSomethingThatUsesDBTX(t *testing.T) {
//
//		// make and configure a mocked sqlcgen.DBTX
//		mockedDBTX := &DBTX{
//			ExecFunc: func(context1 context.Context, s string, ifaceVals ...interface{}) (pgconn.CommandTag, error) {
//				panic("mock out the Exec method")
//			},
//			QueryFunc: func(context1 context.Context, s string, ifaceVals ...interface{}) (pgx.Rows, error) {
//				panic("mock out the Query method")
//			},
//			QueryRowFunc: func(context1 context.Context, s string, ifaceVals ...interface{}) pgx.Row {
//				panic("mock out the QueryRow method")
//			},
//		}
//
//		// use mockedDBTX in code that requires sqlcgen.DBTX
//		// and then make assertions.
//
//	}
type DBTX struct {
	// ExecFunc mocks the Exec method.
	ExecFunc func(context1 context.Context, s string, ifaceVals ...interface{}) (pgconn.CommandTag, error)

	// QueryFunc mocks the Query method.
	QueryFunc func(context1 context.Context, s string, ifaceVals ...interface{}) (pgx.Rows, error)

	// QueryRowFunc mocks the QueryRow method.
	QueryRowFunc func(context1 context.Context, s string, ifaceVals ...interface{}) pgx.Row

	// calls tracks calls to the methods.
	calls struct {
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// S is the s argument value.
			S string
			// IfaceVals is the ifaceVals argument value.
			IfaceVals []interface{}
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// S is the s argument value.
			S string
			// IfaceVals is the ifaceVals argument value.
			IfaceVals []interface{}
		}
		// QueryRow holds details about calls to the QueryRow method.
		QueryRow []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// S is the s argument value.
			S string
			// IfaceVals is the ifaceVals argument value.
			IfaceVals []interface{}
		}
	}
	lockExec     sync.RWMutex
	lockQuery    sync.RWMutex
	lockQueryRow sync.RWMutex
}

// Exec calls ExecFunc.
func (mock *DBTX) Exec(context1 context.Context, s string, ifaceVals ...interface{}) (pgconn.CommandTag, error) {
	if mock.ExecFunc == nil {
		panic("DBTX.ExecFunc: method is nil but DBTX.Exec was just called")
	}
	callInfo := struct {
		Context1  context.Context
		S         string
		IfaceVals []interface{}
	}{
		Context1:  context1,
		S:         s,
		IfaceVals: ifaceVals,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	return mock.ExecFunc(context1, s, ifaceVals...)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//
//	len(mockedDBTX.ExecCalls())
func (mock *DBTX) ExecCalls() []struct {
	Context1  context.Context
	S         string
	IfaceVals []interface{}
} {
	var calls []struct {
		Context1  context.Context
		S         string
		IfaceVals []interface{}
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *DBTX) Query(context1 context.Context, s string, ifaceVals ...interface{}) (pgx.Rows, error) {
	if mock.QueryFunc == nil {
		panic("DBTX.QueryFunc: method is nil but DBTX.Query was just called")
	}
	callInfo := struct {
		Context1  context.Context
		S         string
		IfaceVals []interface{}
	}{
		Context1:  context1,
		S:         s,
		IfaceVals: ifaceVals,
	}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc(context1, s, ifaceVals...)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//
//	len(mockedDBTX.QueryCalls())
func (mock *DBTX) QueryCalls() []struct {
	Context1  context.Context
	S         string
	IfaceVals []interface{}
} {
	var calls []struct {
		Context1  context.Context
		S         string
		IfaceVals []interface{}
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}

// QueryRow calls QueryRowFunc.
func (mock *DBTX) QueryRow(context1 context.Context, s string, ifaceVals ...interface{}) pgx.Row {
	if mock.QueryRowFunc == nil {
		panic("DBTX.QueryRowFunc: method is nil but DBTX.QueryRow was just called")
	}
	callInfo := struct {
		Context1  context.Context
		S         string
		IfaceVals []interface{}
	}{
		Context1:  context1,
		S:         s,
		IfaceVals: ifaceVals,
	}
	mock.lockQueryRow.Lock()
	mock.calls.QueryRow = append(mock.calls.QueryRow, callInfo)
	mock.lockQueryRow.Unlock()
	return mock.QueryRowFunc(context1, s, ifaceVals...)
}

// QueryRowCalls gets all the calls that were made to QueryRow.
// Check the length with:
//
//	len(mockedDBTX.QueryRowCalls())
func (mock *DBTX) QueryRowCalls() []struct {
	Context1  context.Context
	S         string
	IfaceVals []interface{}
} {
	var calls []struct {
		Context1  context.Context
		S         string
		IfaceVals []interface{}
	}
	mock.lockQueryRow.RLock()
	calls = mock.calls.QueryRow
	mock.lockQueryRow.RUnlock()
	return calls
}
