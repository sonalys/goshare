// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package middlewaresmock

import (
	"sync"

	"github.com/sonalys/goshare/internal/infrastructure/http/middlewares"
	"github.com/sonalys/goshare/pkg/v1"
)

// Ensure that identityController does implement middlewares.identityController.
// If this is not the case, regenerate this file with mockery.
var _ middlewares.identityController = &identityController{}

// identityController is a mock implementation of middlewares.identityController.
//
//	func TestSomethingThatUsesidentityController(t *testing.T) {
//
//		// make and configure a mocked middlewares.identityController
//		mockedidentityController := &identityController{
//			DecodeFunc: func(jwt string) (*v1.Identity, error) {
//				panic("mock out the Decode method")
//			},
//		}
//
//		// use mockedidentityController in code that requires middlewares.identityController
//		// and then make assertions.
//
//	}
type identityController struct {
	// DecodeFunc mocks the Decode method.
	DecodeFunc func(jwt string) (*v1.Identity, error)

	// calls tracks calls to the methods.
	calls struct {
		// Decode holds details about calls to the Decode method.
		Decode []struct {
			// Jwt is the jwt argument value.
			Jwt string
		}
	}
	lockDecode sync.RWMutex
}

// Decode calls DecodeFunc.
func (mock *identityController) Decode(jwt string) (*v1.Identity, error) {
	if mock.DecodeFunc == nil {
		panic("identityController.DecodeFunc: method is nil but identityController.Decode was just called")
	}
	callInfo := struct {
		Jwt string
	}{
		Jwt: jwt,
	}
	mock.lockDecode.Lock()
	mock.calls.Decode = append(mock.calls.Decode, callInfo)
	mock.lockDecode.Unlock()
	return mock.DecodeFunc(jwt)
}

// DecodeCalls gets all the calls that were made to Decode.
// Check the length with:
//
//	len(mockedidentityController.DecodeCalls())
func (mock *identityController) DecodeCalls() []struct {
	Jwt string
} {
	var calls []struct {
		Jwt string
	}
	mock.lockDecode.RLock()
	calls = mock.calls.Decode
	mock.lockDecode.RUnlock()
	return calls
}
