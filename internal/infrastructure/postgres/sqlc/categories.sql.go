// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categories.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO categories (id,ledger_id,name,parent_id,created_at,created_by) VALUES ($1,$2,$3,$4,$5,$6)
`

type CreateCategoryParams struct {
	ID        pgtype.UUID
	LedgerID  pgtype.UUID
	Name      string
	ParentID  pgtype.UUID
	CreatedAt pgtype.Timestamp
	CreatedBy pgtype.UUID
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.Exec(ctx, createCategory,
		arg.ID,
		arg.LedgerID,
		arg.Name,
		arg.ParentID,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	return err
}

const getLedgerCategories = `-- name: GetLedgerCategories :many
SELECT id, ledger_id, name, parent_id, created_at, created_by FROM categories WHERE ledger_id = $1
`

func (q *Queries) GetLedgerCategories(ctx context.Context, ledgerID pgtype.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, getLedgerCategories, ledgerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.LedgerID,
			&i.Name,
			&i.ParentID,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
