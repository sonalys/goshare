// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: expenses.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/sonalys/goshare/internal/domain"
)

const createExpense = `-- name: CreateExpense :exec
INSERT INTO expenses (id,ledger_id,amount,name,expense_date,created_at,created_by,updated_at,updated_by) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9)
`

type CreateExpenseParams struct {
	ID          domain.ID
	LedgerID    domain.ID
	Amount      int32
	Name        string
	ExpenseDate pgtype.Timestamp
	CreatedAt   pgtype.Timestamp
	CreatedBy   domain.ID
	UpdatedAt   pgtype.Timestamp
	UpdatedBy   domain.ID
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) error {
	_, err := q.db.Exec(ctx, createExpense,
		arg.ID,
		arg.LedgerID,
		arg.Amount,
		arg.Name,
		arg.ExpenseDate,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}

const createExpenseRecord = `-- name: CreateExpenseRecord :exec
INSERT INTO expense_records (id,expense_id,record_type,amount,from_user_id,to_user_id,created_at,created_by,updated_at,updated_by) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) ON CONFLICT(id) DO NOTHING
`

type CreateExpenseRecordParams struct {
	ID         domain.ID
	ExpenseID  domain.ID
	RecordType string
	Amount     int32
	FromUserID domain.ID
	ToUserID   domain.ID
	CreatedAt  pgtype.Timestamp
	CreatedBy  domain.ID
	UpdatedAt  pgtype.Timestamp
	UpdatedBy  domain.ID
}

func (q *Queries) CreateExpenseRecord(ctx context.Context, arg CreateExpenseRecordParams) error {
	_, err := q.db.Exec(ctx, createExpenseRecord,
		arg.ID,
		arg.ExpenseID,
		arg.RecordType,
		arg.Amount,
		arg.FromUserID,
		arg.ToUserID,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expenses WHERE id = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, id domain.ID) error {
	_, err := q.db.Exec(ctx, deleteExpense, id)
	return err
}

const deleteExpenseRecordsNotIn = `-- name: DeleteExpenseRecordsNotIn :exec
DELETE FROM expense_records WHERE id != ALL($1::uuid[])
`

func (q *Queries) DeleteExpenseRecordsNotIn(ctx context.Context, ids []domain.ID) error {
	_, err := q.db.Exec(ctx, deleteExpenseRecordsNotIn, ids)
	return err
}

const getExpenseById = `-- name: GetExpenseById :one
SELECT id, ledger_id, amount, name, expense_date, created_at, created_by, updated_at, updated_by FROM expenses WHERE id = $1
`

func (q *Queries) GetExpenseById(ctx context.Context, id domain.ID) (Expense, error) {
	row := q.db.QueryRow(ctx, getExpenseById, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.LedgerID,
		&i.Amount,
		&i.Name,
		&i.ExpenseDate,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getExpenseRecords = `-- name: GetExpenseRecords :many
SELECT id, expense_id, record_type, amount, from_user_id, to_user_id, created_at, created_by, updated_at, updated_by FROM expense_records WHERE expense_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetExpenseRecords(ctx context.Context, expenseID domain.ID) ([]ExpenseRecord, error) {
	rows, err := q.db.Query(ctx, getExpenseRecords, expenseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExpenseRecord
	for rows.Next() {
		var i ExpenseRecord
		if err := rows.Scan(
			&i.ID,
			&i.ExpenseID,
			&i.RecordType,
			&i.Amount,
			&i.FromUserID,
			&i.ToUserID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpensesByLedger = `-- name: GetExpensesByLedger :many
SELECT id, ledger_id, amount, name, expense_date, created_at, created_by, updated_at, updated_by FROM expenses WHERE ledger_id = $1 AND created_at < $2 ORDER BY created_at DESC LIMIT $3
`

type GetExpensesByLedgerParams struct {
	LedgerID  domain.ID
	CreatedAt pgtype.Timestamp
	Limit     int32
}

func (q *Queries) GetExpensesByLedger(ctx context.Context, arg GetExpensesByLedgerParams) ([]Expense, error) {
	rows, err := q.db.Query(ctx, getExpensesByLedger, arg.LedgerID, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.LedgerID,
			&i.Amount,
			&i.Name,
			&i.ExpenseDate,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLedgerExpenses = `-- name: GetLedgerExpenses :many
SELECT id, ledger_id, amount, name, expense_date, created_at, created_by, updated_at, updated_by FROM expenses WHERE ledger_id = $1 AND created_at < $2 ORDER BY created_at DESC LIMIT $3
`

type GetLedgerExpensesParams struct {
	LedgerID  domain.ID
	CreatedAt pgtype.Timestamp
	Limit     int32
}

func (q *Queries) GetLedgerExpenses(ctx context.Context, arg GetLedgerExpensesParams) ([]Expense, error) {
	rows, err := q.db.Query(ctx, getLedgerExpenses, arg.LedgerID, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.LedgerID,
			&i.Amount,
			&i.Name,
			&i.ExpenseDate,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpense = `-- name: UpdateExpense :exec
UPDATE expenses SET amount = $1, name = $2, expense_date = $3, updated_at = $4, updated_by = $5 WHERE id = $6
`

type UpdateExpenseParams struct {
	Amount      int32
	Name        string
	ExpenseDate pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	UpdatedBy   domain.ID
	ID          domain.ID
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) error {
	_, err := q.db.Exec(ctx, updateExpense,
		arg.Amount,
		arg.Name,
		arg.ExpenseDate,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
