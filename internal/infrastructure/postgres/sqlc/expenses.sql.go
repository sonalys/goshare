// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: expenses.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExpense = `-- name: CreateExpense :exec
INSERT INTO expenses (id,category_id,ledger_id,amount,name,expense_date,created_at,created_by,updated_at,updated_by) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
`

type CreateExpenseParams struct {
	ID          pgtype.UUID
	CategoryID  pgtype.UUID
	LedgerID    pgtype.UUID
	Amount      int32
	Name        string
	ExpenseDate pgtype.Timestamp
	CreatedAt   pgtype.Timestamp
	CreatedBy   pgtype.UUID
	UpdatedAt   pgtype.Timestamp
	UpdatedBy   pgtype.UUID
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) error {
	_, err := q.db.Exec(ctx, createExpense,
		arg.ID,
		arg.CategoryID,
		arg.LedgerID,
		arg.Amount,
		arg.Name,
		arg.ExpenseDate,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}

const createExpensePayment = `-- name: CreateExpensePayment :exec
INSERT INTO expense_payments (id,expense_id,user_id,amount,payment_date,created_at,created_by,updated_at,updated_by) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9)
`

type CreateExpensePaymentParams struct {
	ID          pgtype.UUID
	ExpenseID   pgtype.UUID
	UserID      pgtype.UUID
	Amount      int32
	PaymentDate pgtype.Timestamp
	CreatedAt   pgtype.Timestamp
	CreatedBy   pgtype.UUID
	UpdatedAt   pgtype.Timestamp
	UpdatedBy   pgtype.UUID
}

func (q *Queries) CreateExpensePayment(ctx context.Context, arg CreateExpensePaymentParams) error {
	_, err := q.db.Exec(ctx, createExpensePayment,
		arg.ID,
		arg.ExpenseID,
		arg.UserID,
		arg.Amount,
		arg.PaymentDate,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	return err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expenses WHERE id = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteExpense, id)
	return err
}

const deleteExpensePayment = `-- name: DeleteExpensePayment :exec
DELETE FROM expense_payments WHERE id = $1
`

func (q *Queries) DeleteExpensePayment(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteExpensePayment, id)
	return err
}

const findExpenseById = `-- name: FindExpenseById :one
SELECT id, category_id, ledger_id, amount, name, expense_date, created_at, created_by, updated_at, updated_by FROM expenses WHERE id = $1
`

func (q *Queries) FindExpenseById(ctx context.Context, id pgtype.UUID) (Expense, error) {
	row := q.db.QueryRow(ctx, findExpenseById, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.LedgerID,
		&i.Amount,
		&i.Name,
		&i.ExpenseDate,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const findExpensePaymentById = `-- name: FindExpensePaymentById :one
SELECT id, expense_id, user_id, ledger_id, amount, payment_date, created_at, created_by, updated_at, updated_by FROM expense_payments WHERE id = $1
`

func (q *Queries) FindExpensePaymentById(ctx context.Context, id pgtype.UUID) (ExpensePayment, error) {
	row := q.db.QueryRow(ctx, findExpensePaymentById, id)
	var i ExpensePayment
	err := row.Scan(
		&i.ID,
		&i.ExpenseID,
		&i.UserID,
		&i.LedgerID,
		&i.Amount,
		&i.PaymentDate,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getExpensePayments = `-- name: GetExpensePayments :many
SELECT id, expense_id, user_id, ledger_id, amount, payment_date, created_at, created_by, updated_at, updated_by FROM expense_payments WHERE expense_id = $1
`

func (q *Queries) GetExpensePayments(ctx context.Context, expenseID pgtype.UUID) ([]ExpensePayment, error) {
	rows, err := q.db.Query(ctx, getExpensePayments, expenseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExpensePayment
	for rows.Next() {
		var i ExpensePayment
		if err := rows.Scan(
			&i.ID,
			&i.ExpenseID,
			&i.UserID,
			&i.LedgerID,
			&i.Amount,
			&i.PaymentDate,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLedgerExpenses = `-- name: GetLedgerExpenses :many
SELECT id, category_id, ledger_id, amount, name, expense_date, created_at, created_by, updated_at, updated_by FROM expenses WHERE ledger_id = $1 AND created_at > $2 ORDER BY created_at DESC LIMIT $3
`

type GetLedgerExpensesParams struct {
	LedgerID  pgtype.UUID
	CreatedAt pgtype.Timestamp
	Limit     int32
}

func (q *Queries) GetLedgerExpenses(ctx context.Context, arg GetLedgerExpensesParams) ([]Expense, error) {
	rows, err := q.db.Query(ctx, getLedgerExpenses, arg.LedgerID, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.LedgerID,
			&i.Amount,
			&i.Name,
			&i.ExpenseDate,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpense = `-- name: UpdateExpense :exec
UPDATE expenses SET category_id = $1, amount = $2, name = $3, expense_date = $4, updated_at = $5, updated_by = $6 WHERE id = $7
`

type UpdateExpenseParams struct {
	CategoryID  pgtype.UUID
	Amount      int32
	Name        string
	ExpenseDate pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	UpdatedBy   pgtype.UUID
	ID          pgtype.UUID
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) error {
	_, err := q.db.Exec(ctx, updateExpense,
		arg.CategoryID,
		arg.Amount,
		arg.Name,
		arg.ExpenseDate,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateExpensePayment = `-- name: UpdateExpensePayment :exec
UPDATE expense_payments SET user_id = $1, amount = $2, payment_date = $3, updated_at = $4, updated_by = $5 WHERE id = $6
`

type UpdateExpensePaymentParams struct {
	UserID      pgtype.UUID
	Amount      int32
	PaymentDate pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	UpdatedBy   pgtype.UUID
	ID          pgtype.UUID
}

func (q *Queries) UpdateExpensePayment(ctx context.Context, arg UpdateExpensePaymentParams) error {
	_, err := q.db.Exec(ctx, updateExpensePayment,
		arg.UserID,
		arg.Amount,
		arg.PaymentDate,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
