// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ledgers.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserToLedger = `-- name: AddUserToLedger :exec
INSERT INTO ledger_participants (id,ledger_id,user_id,created_at,created_by,balance) VALUES ($1,$2,$3,$4,$5,$6)
`

type AddUserToLedgerParams struct {
	ID        pgtype.UUID
	LedgerID  pgtype.UUID
	UserID    pgtype.UUID
	CreatedAt pgtype.Timestamp
	CreatedBy pgtype.UUID
	Balance   int32
}

func (q *Queries) AddUserToLedger(ctx context.Context, arg AddUserToLedgerParams) error {
	_, err := q.db.Exec(ctx, addUserToLedger,
		arg.ID,
		arg.LedgerID,
		arg.UserID,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.Balance,
	)
	return err
}

const countLedgerUsers = `-- name: CountLedgerUsers :one
SELECT COUNT(*) FROM ledgers WHERE id = $1
`

func (q *Queries) CountLedgerUsers(ctx context.Context, id pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countLedgerUsers, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserLedgers = `-- name: CountUserLedgers :one
SELECT COUNT(*) FROM ledgers WHERE created_by = $1
`

func (q *Queries) CountUserLedgers(ctx context.Context, createdBy pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countUserLedgers, createdBy)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLedger = `-- name: CreateLedger :exec
INSERT INTO ledgers (id,name,created_at,created_by) VALUES ($1,$2,$3,$4)
`

type CreateLedgerParams struct {
	ID        pgtype.UUID
	Name      string
	CreatedAt pgtype.Timestamp
	CreatedBy pgtype.UUID
}

func (q *Queries) CreateLedger(ctx context.Context, arg CreateLedgerParams) error {
	_, err := q.db.Exec(ctx, createLedger,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	return err
}

const findLedgerById = `-- name: FindLedgerById :one
SELECT id, name, created_at, created_by FROM ledgers WHERE id = $1
`

func (q *Queries) FindLedgerById(ctx context.Context, id pgtype.UUID) (Ledger, error) {
	row := q.db.QueryRow(ctx, findLedgerById, id)
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getLedgerParticipants = `-- name: GetLedgerParticipants :many
SELECT id, ledger_id, user_id, created_at, created_by, balance FROM ledger_participants WHERE ledger_id = $1
`

func (q *Queries) GetLedgerParticipants(ctx context.Context, ledgerID pgtype.UUID) ([]LedgerParticipant, error) {
	rows, err := q.db.Query(ctx, getLedgerParticipants, ledgerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LedgerParticipant
	for rows.Next() {
		var i LedgerParticipant
		if err := rows.Scan(
			&i.ID,
			&i.LedgerID,
			&i.UserID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLedgers = `-- name: GetUserLedgers :many
SELECT ledgers.id, ledgers.name, ledgers.created_at, ledgers.created_by FROM ledgers JOIN ledger_participants ON ledgers.id = ledger_participants.ledger_id WHERE ledger_participants.user_id = $1 ORDER BY ledgers.created_at DESC
`

func (q *Queries) GetUserLedgers(ctx context.Context, userID pgtype.UUID) ([]Ledger, error) {
	rows, err := q.db.Query(ctx, getUserLedgers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ledger
	for rows.Next() {
		var i Ledger
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lockLedgerForUpdate = `-- name: LockLedgerForUpdate :exec
SELECT id, name, created_at, created_by FROM ledgers WHERE id = $1 FOR UPDATE
`

func (q *Queries) LockLedgerForUpdate(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, lockLedgerForUpdate, id)
	return err
}

const lockUserForUpdate = `-- name: LockUserForUpdate :exec
SELECT id, first_name, last_name, email, password_hash, created_at FROM users WHERE id = $1 FOR UPDATE
`

func (q *Queries) LockUserForUpdate(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, lockUserForUpdate, id)
	return err
}

const removeUserFromLedger = `-- name: RemoveUserFromLedger :exec
DELETE FROM ledger_participants WHERE id = $1
`

func (q *Queries) RemoveUserFromLedger(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, removeUserFromLedger, id)
	return err
}

const updateLedger = `-- name: UpdateLedger :exec
UPDATE ledgers SET name = $1 WHERE id = $2
`

type UpdateLedgerParams struct {
	Name string
	ID   pgtype.UUID
}

func (q *Queries) UpdateLedger(ctx context.Context, arg UpdateLedgerParams) error {
	_, err := q.db.Exec(ctx, updateLedger, arg.Name, arg.ID)
	return err
}
