// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ledgers.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserToLedger = `-- name: AddUserToLedger :exec
INSERT INTO ledger_participants (id,ledger_id,user_id,created_at,created_by) VALUES ($1,$2,$3,$4,$5)
`

type AddUserToLedgerParams struct {
	ID        pgtype.UUID
	LedgerID  pgtype.UUID
	UserID    pgtype.UUID
	CreatedAt pgtype.Timestamp
	CreatedBy pgtype.UUID
}

func (q *Queries) AddUserToLedger(ctx context.Context, arg AddUserToLedgerParams) error {
	_, err := q.db.Exec(ctx, addUserToLedger,
		arg.ID,
		arg.LedgerID,
		arg.UserID,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	return err
}

const appendLedgerRecord = `-- name: AppendLedgerRecord :exec
INSERT INTO ledger_records (id,ledger_id,expense_id,user_id,amount,created_at,created_by,description) VALUES ($1,$2,$3,$4,$5,$6,$7,$8)
`

type AppendLedgerRecordParams struct {
	ID          pgtype.UUID
	LedgerID    pgtype.UUID
	ExpenseID   pgtype.UUID
	UserID      pgtype.UUID
	Amount      int32
	CreatedAt   pgtype.Timestamp
	CreatedBy   pgtype.UUID
	Description string
}

func (q *Queries) AppendLedgerRecord(ctx context.Context, arg AppendLedgerRecordParams) error {
	_, err := q.db.Exec(ctx, appendLedgerRecord,
		arg.ID,
		arg.LedgerID,
		arg.ExpenseID,
		arg.UserID,
		arg.Amount,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.Description,
	)
	return err
}

const countLedgerUsers = `-- name: CountLedgerUsers :one
SELECT COUNT(*) FROM ledgers WHERE id = $1
`

func (q *Queries) CountLedgerUsers(ctx context.Context, id pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countLedgerUsers, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserLedgers = `-- name: CountUserLedgers :one
SELECT COUNT(*) FROM ledgers WHERE created_by = $1
`

func (q *Queries) CountUserLedgers(ctx context.Context, createdBy pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countUserLedgers, createdBy)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLedger = `-- name: CreateLedger :exec
INSERT INTO ledgers (id,name,created_at,created_by) VALUES ($1,$2,$3,$4)
`

type CreateLedgerParams struct {
	ID        pgtype.UUID
	Name      string
	CreatedAt pgtype.Timestamp
	CreatedBy pgtype.UUID
}

func (q *Queries) CreateLedger(ctx context.Context, arg CreateLedgerParams) error {
	_, err := q.db.Exec(ctx, createLedger,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	return err
}

const createLedgerParticipantBalance = `-- name: CreateLedgerParticipantBalance :exec
INSERT INTO ledger_participant_balances (id,ledger_id,user_id,last_timestamp,balance) VALUES ($1,$2,$3,$4,$5)
`

type CreateLedgerParticipantBalanceParams struct {
	ID            pgtype.UUID
	LedgerID      pgtype.UUID
	UserID        pgtype.UUID
	LastTimestamp pgtype.Timestamp
	Balance       int32
}

func (q *Queries) CreateLedgerParticipantBalance(ctx context.Context, arg CreateLedgerParticipantBalanceParams) error {
	_, err := q.db.Exec(ctx, createLedgerParticipantBalance,
		arg.ID,
		arg.LedgerID,
		arg.UserID,
		arg.LastTimestamp,
		arg.Balance,
	)
	return err
}

const findLedgerById = `-- name: FindLedgerById :one
SELECT id, name, created_at, created_by FROM ledgers WHERE id = $1
`

func (q *Queries) FindLedgerById(ctx context.Context, id pgtype.UUID) (Ledger, error) {
	row := q.db.QueryRow(ctx, findLedgerById, id)
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getExpensesRecords = `-- name: GetExpensesRecords :many
SELECT id, ledger_id, expense_id, user_id, amount, created_at, created_by, description FROM ledger_records WHERE expense_id IN (SELECT unnest($1::uuid[]))
`

func (q *Queries) GetExpensesRecords(ctx context.Context, dollar_1 []pgtype.UUID) ([]LedgerRecord, error) {
	rows, err := q.db.Query(ctx, getExpensesRecords, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LedgerRecord
	for rows.Next() {
		var i LedgerRecord
		if err := rows.Scan(
			&i.ID,
			&i.LedgerID,
			&i.ExpenseID,
			&i.UserID,
			&i.Amount,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLedgerBalances = `-- name: GetLedgerBalances :many
SELECT id, ledger_id, user_id, last_timestamp, balance FROM ledger_participant_balances WHERE ledger_id = $1
`

func (q *Queries) GetLedgerBalances(ctx context.Context, ledgerID pgtype.UUID) ([]LedgerParticipantBalance, error) {
	rows, err := q.db.Query(ctx, getLedgerBalances, ledgerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LedgerParticipantBalance
	for rows.Next() {
		var i LedgerParticipantBalance
		if err := rows.Scan(
			&i.ID,
			&i.LedgerID,
			&i.UserID,
			&i.LastTimestamp,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLedgerParticipants = `-- name: GetLedgerParticipants :many
SELECT id, ledger_id, user_id, created_at, created_by FROM ledger_participants WHERE ledger_id = $1
`

func (q *Queries) GetLedgerParticipants(ctx context.Context, ledgerID pgtype.UUID) ([]LedgerParticipant, error) {
	rows, err := q.db.Query(ctx, getLedgerParticipants, ledgerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LedgerParticipant
	for rows.Next() {
		var i LedgerParticipant
		if err := rows.Scan(
			&i.ID,
			&i.LedgerID,
			&i.UserID,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLedgerParticipantsWithBalance = `-- name: GetLedgerParticipantsWithBalance :many
SELECT 
    lp.ledger_id,
    lp.user_id,
    lp.created_by,
    MAX(lr.created_at)::TIMESTAMP AS last_timestamp,
    COALESCE(lpb.balance, 0) + COALESCE(SUM(lr.amount), 0) AS balance
FROM 
    ledger_participants lp
LEFT JOIN 
    ledger_participant_balances lpb ON lp.ledger_id = lpb.ledger_id AND lp.user_id = lpb.user_id
LEFT JOIN 
    ledger_records lr ON lp.ledger_id = lr.ledger_id AND lp.user_id = lr.user_id AND lr.created_at > lpb.last_timestamp
WHERE 
    lp.ledger_id = $1
GROUP BY 
    lp.ledger_id, lp.user_id, lp.created_at, lp.created_by, lpb.balance
ORDER BY
    lp.user_id
`

type GetLedgerParticipantsWithBalanceRow struct {
	LedgerID      pgtype.UUID
	UserID        pgtype.UUID
	CreatedBy     pgtype.UUID
	LastTimestamp pgtype.Timestamp
	Balance       int32
}

func (q *Queries) GetLedgerParticipantsWithBalance(ctx context.Context, ledgerID pgtype.UUID) ([]GetLedgerParticipantsWithBalanceRow, error) {
	rows, err := q.db.Query(ctx, getLedgerParticipantsWithBalance, ledgerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLedgerParticipantsWithBalanceRow
	for rows.Next() {
		var i GetLedgerParticipantsWithBalanceRow
		if err := rows.Scan(
			&i.LedgerID,
			&i.UserID,
			&i.CreatedBy,
			&i.LastTimestamp,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLedgerRecords = `-- name: GetLedgerRecords :many
SELECT id, ledger_id, expense_id, user_id, amount, created_at, created_by, description FROM ledger_records WHERE ledger_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetLedgerRecords(ctx context.Context, ledgerID pgtype.UUID) ([]LedgerRecord, error) {
	rows, err := q.db.Query(ctx, getLedgerRecords, ledgerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LedgerRecord
	for rows.Next() {
		var i LedgerRecord
		if err := rows.Scan(
			&i.ID,
			&i.LedgerID,
			&i.ExpenseID,
			&i.UserID,
			&i.Amount,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLedgerRecordsFromTimestamp = `-- name: GetLedgerRecordsFromTimestamp :many
SELECT id, ledger_id, expense_id, user_id, amount, created_at, created_by, description FROM ledger_records WHERE ledger_id = $1 AND created_at > $2 ORDER BY created_at ASC
`

type GetLedgerRecordsFromTimestampParams struct {
	LedgerID  pgtype.UUID
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetLedgerRecordsFromTimestamp(ctx context.Context, arg GetLedgerRecordsFromTimestampParams) ([]LedgerRecord, error) {
	rows, err := q.db.Query(ctx, getLedgerRecordsFromTimestamp, arg.LedgerID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LedgerRecord
	for rows.Next() {
		var i LedgerRecord
		if err := rows.Scan(
			&i.ID,
			&i.LedgerID,
			&i.ExpenseID,
			&i.UserID,
			&i.Amount,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLedgerUserRecords = `-- name: GetLedgerUserRecords :many
SELECT id, ledger_id, expense_id, user_id, amount, created_at, created_by, description FROM ledger_records WHERE ledger_id = $1 AND user_id = $2 ORDER BY created_at DESC
`

type GetLedgerUserRecordsParams struct {
	LedgerID pgtype.UUID
	UserID   pgtype.UUID
}

func (q *Queries) GetLedgerUserRecords(ctx context.Context, arg GetLedgerUserRecordsParams) ([]LedgerRecord, error) {
	rows, err := q.db.Query(ctx, getLedgerUserRecords, arg.LedgerID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LedgerRecord
	for rows.Next() {
		var i LedgerRecord
		if err := rows.Scan(
			&i.ID,
			&i.LedgerID,
			&i.ExpenseID,
			&i.UserID,
			&i.Amount,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLedgers = `-- name: GetUserLedgers :many
SELECT ledgers.id, ledgers.name, ledgers.created_at, ledgers.created_by FROM ledgers JOIN ledger_participants ON ledgers.id = ledger_participants.ledger_id WHERE ledger_participants.user_id = $1 ORDER BY ledgers.created_at DESC
`

func (q *Queries) GetUserLedgers(ctx context.Context, userID pgtype.UUID) ([]Ledger, error) {
	rows, err := q.db.Query(ctx, getUserLedgers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ledger
	for rows.Next() {
		var i Ledger
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lockLedgerForUpdate = `-- name: LockLedgerForUpdate :exec
SELECT id, name, created_at, created_by FROM ledgers WHERE id = $1 FOR UPDATE
`

func (q *Queries) LockLedgerForUpdate(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, lockLedgerForUpdate, id)
	return err
}

const lockUserForUpdate = `-- name: LockUserForUpdate :exec
SELECT id, first_name, last_name, email, password_hash, created_at FROM users WHERE id = $1 FOR UPDATE
`

func (q *Queries) LockUserForUpdate(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, lockUserForUpdate, id)
	return err
}

const updateLedgerParticipantBalance = `-- name: UpdateLedgerParticipantBalance :exec
UPDATE ledger_participant_balances SET last_timestamp = $1, balance = $2 WHERE ledger_id = $3 AND user_id = $4
`

type UpdateLedgerParticipantBalanceParams struct {
	LastTimestamp pgtype.Timestamp
	Balance       int32
	LedgerID      pgtype.UUID
	UserID        pgtype.UUID
}

func (q *Queries) UpdateLedgerParticipantBalance(ctx context.Context, arg UpdateLedgerParticipantBalanceParams) error {
	_, err := q.db.Exec(ctx, updateLedgerParticipantBalance,
		arg.LastTimestamp,
		arg.Balance,
		arg.LedgerID,
		arg.UserID,
	)
	return err
}

const upsertLedgerParticipantBalance = `-- name: UpsertLedgerParticipantBalance :exec
INSERT INTO ledger_participant_balances (id, ledger_id, user_id, last_timestamp, balance)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (ledger_id, user_id) 
DO UPDATE SET 
    last_timestamp = EXCLUDED.last_timestamp,
    balance = EXCLUDED.balance
`

type UpsertLedgerParticipantBalanceParams struct {
	ID            pgtype.UUID
	LedgerID      pgtype.UUID
	UserID        pgtype.UUID
	LastTimestamp pgtype.Timestamp
	Balance       int32
}

func (q *Queries) UpsertLedgerParticipantBalance(ctx context.Context, arg UpsertLedgerParticipantBalanceParams) error {
	_, err := q.db.Exec(ctx, upsertLedgerParticipantBalance,
		arg.ID,
		arg.LedgerID,
		arg.UserID,
		arg.LastTimestamp,
		arg.Balance,
	)
	return err
}
