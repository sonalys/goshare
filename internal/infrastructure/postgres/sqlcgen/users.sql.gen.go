// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc application.29.0
// source: users.sql

package sqlcgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/sonalys/goshare/internal/domain"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id,first_name,last_name,email,password_hash,ledger_count,created_at) 
VALUES ($1,$2,$3,$4,$5,$6,$7)
ON CONFLICT (id)
DO UPDATE
SET
first_name = EXCLUDED.first_name,
last_name = EXCLUDED.last_name,
email = EXCLUDED.email,
password_hash = EXCLUDED.password_hash,
ledger_count = EXCLUDED.ledger_count
`

type CreateUserParams struct {
	ID           domain.ID
	FirstName    string
	LastName     string
	Email        string
	PasswordHash string
	LedgerCount  int32
	CreatedAt    pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.LedgerCount,
		arg.CreatedAt,
	)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, email, password_hash, created_at, ledger_count FROM users WHERE id = $1 FOR UPDATE
`

func (q *Queries) GetUser(ctx context.Context, id domain.ID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.LedgerCount,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, password_hash, created_at, ledger_count FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.LedgerCount,
	)
	return i, err
}

const listByEmail = `-- name: ListByEmail :many
SELECT id, first_name, last_name, email, password_hash, created_at, ledger_count FROM users WHERE email = ANY($1::text[])
`

func (q *Queries) ListByEmail(ctx context.Context, emails []string) ([]User, error) {
	rows, err := q.db.Query(ctx, listByEmail, emails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.LedgerCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
